#!/usr/bin/env python2.7

import socketstruct, sys, telnetlib, binascii

HOST = "127.0.0.1"
PORT = 1337

DEBUG = True

def xor(data, key):
    return ''.join(chr(ord(x) ^ ord(y)) for (x,y) in zip(data, itertools.cycle(key)))

def hexdump(src, length=0x10):
    f=''.join([(len(repr(chr(x)))==3) and chr(x) or '.' for x in range(256)])
    n=0
    result=''
    while src:
       s,src = src[:length],src[length:]
       hexa = ' '.join(["%%02X"%%ord(x) for x in s])
       s = s.translate(f)
       result += "%%04X   %%-*s   %%s\\n" %% (n, length*3, hexa, s)
       n+=length
    return result

def h_s(i):
    return struct.pack("<I", i)
def h_u(i):
    return struct.unpack("<I", i)[0]
def i_s(i):
    return struct.pack("<I", i)
def i_u(i):
    return struct.unpack("<I", i)[0]
def q_s(i):
    return struct.pack("<Q", i)
def q_u(i):
    return struct.unpack("<Q", i)[0]

def err(msg):
    print(("[!] %%s" %% msg))
    return

def ok(msg):
    print(("[+] %%s" %% msg))
    return

def debug(msg, in_hexa=False):
    if DEBUG:
        if not in_hexa:
            print(("[*] %%s" %% msg))
        else:
            print(("[*] Hexdump:\\n%%s" %% hexdump(msg)))


def grab_banner(s):
    data = s.recv(1024)
    debug("Received %%d bytes: %%s" %% (len(data), data))
    return data

def recv_until(s, pattern="", blocking=False):
    buffer = ""
    while True:
        data = s.recv(1024)
        if data < 0: break
        if data == 0 and not blocking: break
        buffer += data
        if buffer.endswith(pattern): break
    debug("Received %%d bytes until pattern" %% len(buffer))
    return buffer

def build_socket(host, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    ok("Connected to %%s:%%d" %% (host, port))
    return s

def interact(s):
    t = telnetlib.Telnet()
    t.sock = s
    try:
        t.interact()
    except KeyboardInterrupt:
        ok("Leaving")
    t.close()
    return

def pwn(s):
    #
    # add your l337 stuff here
    #
    return True

if __name__ == "__main__":
    s = build_socket(HOST, PORT)
    banner = grab_banner(s)
    if pwn(s):
        ok("Got it, interacting (Ctrl-C to break)")
        interact(s)
    else:
        err("Failed to exploit")
    exit(0)
